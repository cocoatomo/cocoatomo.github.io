{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5165\u9580 \ud83d\udd17 Poetry\u306fPython\u3067\u306e\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0\u306e\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002 Poetry\u3092\u4f7f\u3046\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5ba3\u8a00\u3067\u304d\u3001\u305d\u308c\u3089\u3092\u7ba1\u7406 (\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304a\u3088\u3073\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8) \u3057\u3066\u304f\u308c\u307e\u3059\u3002 \u30b7\u30b9\u30c6\u30e0\u8981\u4ef6 \ud83d\udd17 Poetry\u306fPython 2.7\u3042\u308b\u3044\u306fPython 3.4\u4ee5\u964d\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002 Poetry\u306f\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u3066\u3001Windows, Linux, OSX\u3067\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u3066\u3044\u307e\u3059\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \ud83d\udd17 Poetry\u306f\u72ec\u81ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u63d0\u4f9b\u3057\u3066\u3044\u3066\u3001\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30d9\u30f3\u30c0\u30fc\u5316 (vendorizing) \u306b\u3088\u3063\u3066 poetry \u3092\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u4ed6\u306e\u3082\u306e\u304b\u3089\u9694\u96e2\u3055\u308c\u305f\u72b6\u614b\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u3053\u308c\u306f\u63a8\u5968\u3055\u308c\u305f poetry \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3067\u3059\u3002 curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python \u6ce8\u610f Poetry\u306f\u4e00\u5ea6\u3060\u3051\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002Poetry\u306f\u73fe\u5728\u4f7f\u308f\u308c\u3066\u3044\u308bPython\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u81ea\u52d5\u7684\u306b\u8aad\u307f\u53d6\u308a\u3001 \u305d\u308c\u3092\u8e0f\u307e\u3048\u3066\u9069\u5207\u306b \u4eee\u60f3\u74b0\u5883\u3092\u4f5c\u6210 \u3057\u307e\u3059\u3002 \u3053\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u306f\u3001 poetry \u30c4\u30fc\u30eb\u3092Poetry\u306e bin \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f4d\u7f6e\u306f\u3001Unix\u3067\u306f $HOME/.poetry/bin \u3067\u3001Windows\u3067\u306f %USERPROFILE%\\.poetry\\bin \u3067\u3059\u3002 \u3053\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f $PATH \u74b0\u5883\u5909\u6570\u306b\u542b\u307e\u308c\u3001\u4f55\u304b\u3057\u3089\u306e\u8a2d\u5b9a\u3092\u3057\u306a\u304f\u3066\u3082\u30b7\u30a7\u30eb\u304b\u3089\u5b9f\u884c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u30b7\u30a7\u30eb\u3092\u65b0\u305f\u306b\u958b\u304d\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3061\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044: poetry --version Poetry 0.12.0 \u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u898b\u3048\u305f\u3089\u3001Poetry\u3092\u4f7f\u3046\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002 \u3082\u3057Poetry\u304c\u81ea\u5206\u306b\u306f\u5411\u304b\u306a\u3044\u3068\u5224\u65ad\u3057\u305f\u3089\u3001 --uninstall \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u304b\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b POETRY_UNINSTALL \u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u304b\u3057\u3066\u3001\u5148\u7a0b\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u518d\u5ea6\u5b9f\u884c\u3059\u308b\u3068\u3001\u30b7\u30b9\u30c6\u30e0\u304b\u3089Poetry\u3092\u5b8c\u5168\u306b\u6d88\u53bb\u3067\u304d\u307e\u3059\u3002 python get-poetry.py --uninstall POETRY_UNINSTALL = 1 python get-poetry.py \u30d7\u30ec\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001 get-poetry.py \u306b --preview \u3092\u6e21\u3059\u304b POETRY_PREVIEW \u74b0\u5883\u5909\u6570\u3092\u4f7f\u3048\u3070\u3067\u304d\u307e\u3059: python get-poetry.py --preview POETRY_PREVIEW = 1 python get-poetry.py \u540c\u69d8\u306b\u3001\u7279\u5b9a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001 --version \u3084 POETRY_VERSION \u74b0\u5883\u5909\u6570\u304c\u4f7f\u3048\u307e\u3059: python get-poetry.py --version 0 .12.0 POETRY_VERSION = 0 .12.0 python get-poetry.py \u6ce8\u610f \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u306f\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\u304c0.12.0\u3088\u308a\u524d\u306ePoetry\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4ed6\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5 (\u975e\u63a8\u5968) \ud83d\udd17 \u6ce8\u610f \u4ed6\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3092\u4f7f\u3046\u3068\u3001Poetry\u306f\u5e38\u306b\u3001 \u4eee\u60f3\u74b0\u5883\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306ePython\u3092\u4f7f\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u4f7f\u3044\u305f\u3044Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3054\u3068\u306bPoetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u5207\u308a\u66ff\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 pip \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \ud83d\udd17 pip \u3092\u4f7f\u3063\u3066Poetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002 pip install --user poetry \u8b66\u544a \u4ed6\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u885d\u7a81\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u306e\u3042\u308bPoetry\u306e\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u306b\u3082\u306a\u308b\u306e\u3092\u8a8d\u8b58\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002 pipx \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \ud83d\udd17 pipx \u3092\u4f7f\u3063\u3066Poetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 [pipx]\u306f\u3001Python\u306eCLI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4eee\u60f3\u74b0\u5883\u306b\u9694\u96e2\u3057\u305f\u307e\u307e\u3001\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u66f4\u65b0\u3084\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u74b0\u5883\u3092\u6c5a\u3055\u305a\u306b\u884c\u3048\u307e\u3059\u3002 pipx\u306fPython 3.6\u4ee5\u964d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 \u3082\u3063\u3068\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306ePython\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001 pipsi \u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 pipx install poetry pipx upgrade poetry pipx uninstall poetry Github repository \u3002 poetry \u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8 \ud83d\udd17 Poetry\u3092\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u307e\u3067\u66f4\u65b0\u3059\u308b\u306e\u306f\u7c21\u5358\u3067 self:update \u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\u3002 poetry self:update \u30d7\u30ec\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001 --preview \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u307e\u3059\u3002 poetry self:update --preview \u6700\u5f8c\u306b\u3001\u7279\u5b9a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5f15\u6570\u3068\u3057\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u3092 self:update \u306b\u6e21\u305b\u307e\u3059\u3002 poetry self:update 0 .8.0 \u6ce8\u610f self:update \u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u306e\u306f\u3001\u63a8\u5968\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u4f7f\u3063\u3066 Poetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3068\u304d\u3060\u3051\u3067\u3059\u3002 Bash, Fish, Zsh\u3067\u306e\u88dc\u5b8c\u306e\u6709\u52b9\u5316 \ud83d\udd17 poetry \u306fBash, Fish, Zsh\u7528\u306e\u88dc\u5b8c\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u751f\u6210\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 \u5b8c\u5168\u306a\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f poetry help completions \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u8981\u70b9\u306f\u7c21\u5358\u3067\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u306e\u3069\u308c\u304b1\u3064\u3092\u4f7f\u3046\u3001\u3067\u3059: # Bash poetry completions bash > /etc/bash_completion.d/poetry.bash-completion # Bash (macOS/Homebrew) poetry completions bash > $( brew --prefix ) /etc/bash_completion.d/poetry.bash-completion # Fish poetry completions fish > ~/.config/fish/completions/poetry.fish # Zsh poetry completions zsh > ~/.zfunc/_poetry # Oh-My-Zsh mkdir $ZSH /plugins/poetry poetry completions zsh > $ZSH /plugins/poetry/_poetry \u6ce8\u610f \u5909\u66f4\u304c\u52b9\u304f\u3088\u3046\u306b\u3059\u308b\u306e\u306b\u30b7\u30a7\u30eb\u3092\u518d\u8d77\u52d5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 zsh \u3067\u306f\u3001 ~/.zshrc \u306e compinit \u3088\u308a\u524d\u306b\u6b21\u306e\u884c\u3092\u8ffd\u52a0\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093: fpath += ~/.zfunc oh-my-zsh \u3067\u306f\u3001 ~/.zshrc \u30d7\u30e9\u30b0\u30a4\u30f3\u3067poetry\u3092\u6709\u52b9\u5316\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093: plugins( poetry ... )","title":"Introduction"},{"location":"#_1","text":"Poetry\u306fPython\u3067\u306e\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0\u306e\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002 Poetry\u3092\u4f7f\u3046\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5ba3\u8a00\u3067\u304d\u3001\u305d\u308c\u3089\u3092\u7ba1\u7406 (\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304a\u3088\u3073\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8) \u3057\u3066\u304f\u308c\u307e\u3059\u3002","title":"\u5165\u9580"},{"location":"#_2","text":"Poetry\u306fPython 2.7\u3042\u308b\u3044\u306fPython 3.4\u4ee5\u964d\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002 Poetry\u306f\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u3066\u3001Windows, Linux, OSX\u3067\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6"},{"location":"#_3","text":"Poetry\u306f\u72ec\u81ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u63d0\u4f9b\u3057\u3066\u3044\u3066\u3001\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30d9\u30f3\u30c0\u30fc\u5316 (vendorizing) \u306b\u3088\u3063\u3066 poetry \u3092\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u4ed6\u306e\u3082\u306e\u304b\u3089\u9694\u96e2\u3055\u308c\u305f\u72b6\u614b\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u3053\u308c\u306f\u63a8\u5968\u3055\u308c\u305f poetry \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3067\u3059\u3002 curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python \u6ce8\u610f Poetry\u306f\u4e00\u5ea6\u3060\u3051\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002Poetry\u306f\u73fe\u5728\u4f7f\u308f\u308c\u3066\u3044\u308bPython\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u81ea\u52d5\u7684\u306b\u8aad\u307f\u53d6\u308a\u3001 \u305d\u308c\u3092\u8e0f\u307e\u3048\u3066\u9069\u5207\u306b \u4eee\u60f3\u74b0\u5883\u3092\u4f5c\u6210 \u3057\u307e\u3059\u3002 \u3053\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u306f\u3001 poetry \u30c4\u30fc\u30eb\u3092Poetry\u306e bin \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 \u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f4d\u7f6e\u306f\u3001Unix\u3067\u306f $HOME/.poetry/bin \u3067\u3001Windows\u3067\u306f %USERPROFILE%\\.poetry\\bin \u3067\u3059\u3002 \u3053\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f $PATH \u74b0\u5883\u5909\u6570\u306b\u542b\u307e\u308c\u3001\u4f55\u304b\u3057\u3089\u306e\u8a2d\u5b9a\u3092\u3057\u306a\u304f\u3066\u3082\u30b7\u30a7\u30eb\u304b\u3089\u5b9f\u884c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u30b7\u30a7\u30eb\u3092\u65b0\u305f\u306b\u958b\u304d\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3061\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044: poetry --version Poetry 0.12.0 \u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u898b\u3048\u305f\u3089\u3001Poetry\u3092\u4f7f\u3046\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002 \u3082\u3057Poetry\u304c\u81ea\u5206\u306b\u306f\u5411\u304b\u306a\u3044\u3068\u5224\u65ad\u3057\u305f\u3089\u3001 --uninstall \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u304b\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b POETRY_UNINSTALL \u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u304b\u3057\u3066\u3001\u5148\u7a0b\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u518d\u5ea6\u5b9f\u884c\u3059\u308b\u3068\u3001\u30b7\u30b9\u30c6\u30e0\u304b\u3089Poetry\u3092\u5b8c\u5168\u306b\u6d88\u53bb\u3067\u304d\u307e\u3059\u3002 python get-poetry.py --uninstall POETRY_UNINSTALL = 1 python get-poetry.py \u30d7\u30ec\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001 get-poetry.py \u306b --preview \u3092\u6e21\u3059\u304b POETRY_PREVIEW \u74b0\u5883\u5909\u6570\u3092\u4f7f\u3048\u3070\u3067\u304d\u307e\u3059: python get-poetry.py --preview POETRY_PREVIEW = 1 python get-poetry.py \u540c\u69d8\u306b\u3001\u7279\u5b9a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001 --version \u3084 POETRY_VERSION \u74b0\u5883\u5909\u6570\u304c\u4f7f\u3048\u307e\u3059: python get-poetry.py --version 0 .12.0 POETRY_VERSION = 0 .12.0 python get-poetry.py \u6ce8\u610f \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u306f\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\u304c0.12.0\u3088\u308a\u524d\u306ePoetry\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"#_4","text":"\u6ce8\u610f \u4ed6\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3092\u4f7f\u3046\u3068\u3001Poetry\u306f\u5e38\u306b\u3001 \u4eee\u60f3\u74b0\u5883\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306ePython\u3092\u4f7f\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u4f7f\u3044\u305f\u3044Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3054\u3068\u306bPoetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u5207\u308a\u66ff\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u4ed6\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5 (\u975e\u63a8\u5968)"},{"location":"#pip","text":"pip \u3092\u4f7f\u3063\u3066Poetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002 pip install --user poetry \u8b66\u544a \u4ed6\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u885d\u7a81\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u306e\u3042\u308bPoetry\u306e\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u3092 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u306b\u3082\u306a\u308b\u306e\u3092\u8a8d\u8b58\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002","title":"pip \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"#pipx","text":"pipx \u3092\u4f7f\u3063\u3066Poetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 [pipx]\u306f\u3001Python\u306eCLI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4eee\u60f3\u74b0\u5883\u306b\u9694\u96e2\u3057\u305f\u307e\u307e\u3001\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u66f4\u65b0\u3084\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u74b0\u5883\u3092\u6c5a\u3055\u305a\u306b\u884c\u3048\u307e\u3059\u3002 pipx\u306fPython 3.6\u4ee5\u964d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 \u3082\u3063\u3068\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306ePython\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001 pipsi \u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 pipx install poetry pipx upgrade poetry pipx uninstall poetry Github repository \u3002","title":"pipx \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"#poetry","text":"Poetry\u3092\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u307e\u3067\u66f4\u65b0\u3059\u308b\u306e\u306f\u7c21\u5358\u3067 self:update \u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\u3002 poetry self:update \u30d7\u30ec\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001 --preview \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u307e\u3059\u3002 poetry self:update --preview \u6700\u5f8c\u306b\u3001\u7279\u5b9a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5f15\u6570\u3068\u3057\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u3092 self:update \u306b\u6e21\u305b\u307e\u3059\u3002 poetry self:update 0 .8.0 \u6ce8\u610f self:update \u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u306e\u306f\u3001\u63a8\u5968\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3092\u4f7f\u3063\u3066 Poetry\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3068\u304d\u3060\u3051\u3067\u3059\u3002","title":"poetry \u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8"},{"location":"#bash-fish-zsh","text":"poetry \u306fBash, Fish, Zsh\u7528\u306e\u88dc\u5b8c\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u751f\u6210\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 \u5b8c\u5168\u306a\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f poetry help completions \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u8981\u70b9\u306f\u7c21\u5358\u3067\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u306e\u3069\u308c\u304b1\u3064\u3092\u4f7f\u3046\u3001\u3067\u3059: # Bash poetry completions bash > /etc/bash_completion.d/poetry.bash-completion # Bash (macOS/Homebrew) poetry completions bash > $( brew --prefix ) /etc/bash_completion.d/poetry.bash-completion # Fish poetry completions fish > ~/.config/fish/completions/poetry.fish # Zsh poetry completions zsh > ~/.zfunc/_poetry # Oh-My-Zsh mkdir $ZSH /plugins/poetry poetry completions zsh > $ZSH /plugins/poetry/_poetry \u6ce8\u610f \u5909\u66f4\u304c\u52b9\u304f\u3088\u3046\u306b\u3059\u308b\u306e\u306b\u30b7\u30a7\u30eb\u3092\u518d\u8d77\u52d5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 zsh \u3067\u306f\u3001 ~/.zshrc \u306e compinit \u3088\u308a\u524d\u306b\u6b21\u306e\u884c\u3092\u8ffd\u52a0\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093: fpath += ~/.zfunc oh-my-zsh \u3067\u306f\u3001 ~/.zshrc \u30d7\u30e9\u30b0\u30a4\u30f3\u3067poetry\u3092\u6709\u52b9\u5316\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093: plugins( poetry ... )","title":"Bash, Fish, Zsh\u3067\u306e\u88dc\u5b8c\u306e\u6709\u52b9\u5316"},{"location":"basic-usage/","text":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9 \ud83d\udd17 \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306e\u5165\u9580\u3068\u3057\u3066\u3001 pendulum \u3068\u3044\u3046\u65e5\u4ed8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Poetry\u3092\u307e\u3060\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001 Introduction \u306e\u7ae0\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 \ud83d\udd17 \u6700\u521d\u306b\u3001\u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001 poetry-demo \u3068\u540d\u4ed8\u3051\u307e\u3057\u3087\u3046: poetry new poetry-demo \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u6b21\u306e\u5185\u5bb9\u3092\u6301\u3064 poetry-demo \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059: poetry-demo \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 poetry_demo \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_poetry_demo.py pyproject.toml \u30d5\u30a1\u30a4\u30eb\u304c\u3053\u3053\u3067\u306f\u6700\u3082\u91cd\u8981\u306a\u3082\u306e\u3067\u3059\u3002 \u3053\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u7d71\u62ec\u3057\u307e\u3059\u3002 \u4eca\u306e\u3068\u3053\u308d\u306e\u4e2d\u8eab\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059: [tool.poetry] name = \"poetry-demo\" version = \"0.1.0\" description = \"\" authors = [\"S\u00e9bastien Eustace <sebastien@eustace.io>\"] [tool.poetry.dependencies] python = \"*\" [tool.poetry.dev-dependencies] pytest = \"^3.4\" \u4f9d\u5b58\u95a2\u4fc2\u306e\u6307\u5b9a \ud83d\udd17 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306f\u3001 tool.poetry.dependencies \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 [tool.poetry.dependencies] pendulum = \"^1.4\" \u898b\u3066\u5206\u304b\u308b\u3088\u3046\u306b\u3001\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u306f \u30d1\u30c3\u30b1\u30fc\u30b8\u540d \u3068 \u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04 \u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u66f8\u304d\u307e\u3059\u3002 Poetry\u306f\u3053\u306e\u60c5\u5831\u3092\u4f7f\u3044\u3001 tool.poetry.repositories \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u767b\u9332\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8 \"\u30ec\u30dd\u30b8\u30c8\u30ea\" \u3082\u3057\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e PyPI \u304b\u3089\u3001\u6b63\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 pyproject.toml \u30d5\u30a1\u30a4\u30eb\u3092\u624b\u3067\u7de8\u96c6\u3059\u308b\u5909\u308f\u308a\u306b\u3001 add \u30b3\u30de\u30f3\u30c9\u3082\u4f7f\u3048\u307e\u3059\u3002 $ poetry add pendulum \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u81ea\u52d5\u7684\u306b\u9069\u5207\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u3092\u898b\u4ed8\u3051\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u305d\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u3002 \u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04 \ud83d\udd17 \u4eca\u306e\u4f8b\u3067\u306f\u3001 ^1.4 \u3068\u3044\u3046\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u306e\u4ed8\u3044\u305f pendulum \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8981\u6c42\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u5236\u7d04\u306f\u30011.4.0\u4ee5\u4e0a\u304b\u30642.0.0\u672a\u6e80\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3044\u3046\u610f\u5473\u3067\u3059 ( >=1.4.0 <2.0.0 )\u3002 \u30d0\u30fc\u30b8\u30e7\u30f3\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u3069\u3046\u3057\u306e\u95a2\u4fc2\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u306b\u3064\u3044\u3066\u3001\u3088\u308a\u6df1\u3044\u3053\u3068\u306b\u3064\u3044\u3066\u306f versions \u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002 \u6ce8\u610f Poetry\u306f\u3069\u3046\u3084\u3063\u3066\u6b63\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304b? `pyproject.toml` \u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068\u304d\u3001Poetry\u306f\u307e\u305a\u6700\u521d\u306b\u8981\u6c42\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3092\u53d6\u308a\u51fa\u3057\u3001 `repositories` \u30ad\u30fc\u306b\u767b\u9332\u3055\u308c\u305f\u30ec\u30dd\u30b8\u30c8\u30ea\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 \u8ffd\u52a0\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u3092\u767b\u9332\u3057\u3066\u3044\u306a\u3044\u304b\u3001\u6307\u5b9a\u3057\u305f\u30ec\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u8981\u6c42\u3055\u308c\u305f\u540d\u524d\u306e \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u898b\u4ed8\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001PyPI\u306b\u623b\u3063\u3066\u691c\u7d22\u3057\u307e\u3059\u3002 Poetry\u304c\u6b63\u3057\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8907\u6570\u898b\u4ed8\u3051\u305f\u3068\u304d\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u306b \u6700\u3082\u9069\u5408\u3059\u308b\u3082\u306e\u3092\u898b\u4ed8\u3051\u3088\u3046\u3068\u3057\u307e\u3059\u3002 \u4f9d\u5b58\u95a2\u4fc2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \ud83d\udd17 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306b\u306f\u3001 install \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002 poetry install \u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u30012\u3064\u306e\u3046\u3061\u3069\u3061\u3089\u304b\u304c\u8d77\u3053\u308a\u307e\u3059: poetry.lock \u7121\u3057\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \ud83d\udd17 \u4ee5\u524d\u306b\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3053\u3068\u304c\u7121\u304f\u3001 poetry.lock \u30d5\u30a1\u30a4\u30eb\u3082\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001Poetry\u306f pyproject.toml \u306b\u4e26\u3079\u3089\u308c\u305f\u5168\u3066\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u89e3\u6c7a\u3057\u3001\u305d\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3060\u3051\u3067\u3059\u3002 Poetry\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u5b8c\u4e86\u3059\u308b\u3068\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u305d\u306e\u6b63\u78ba\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u3092 poetry.lock \u3078\u66f8\u304d\u8fbc\u307f\u3001\u305d\u306e\u7279\u5b9a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u56fa\u5b9a\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ec\u30dd\u30b8\u30c8\u30ea\u306b poetry.lock \u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3001\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u643a\u308f\u308b\u5168\u3066\u306e\u4eba\u306b\u3068\u3063\u3066\u3001\u540c\u3058\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u5f37\u5236\u3055\u308c\u308b\u3079\u304d\u3067\u3059 (\u4e0b\u3067\u3055\u3089\u306b\u89e3\u8aac\u3057\u307e\u3059)\u3002 poetry.lock \u6709\u308a\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \ud83d\udd17 This brings us to the second scenario. If there is already a poetry.lock file as well as a pyproject.toml file when you run poetry install , it means either you ran the install command before, or someone else on the project ran the install command and committed the poetry.lock file to the project (which is good). Either way, running install when a poetry.lock file is present resolves and installs all dependencies that you listed in pyproject.toml , but Poetry uses the exact versions listed in poetry.lock to ensure that the package versions are consistent for everyone working on your project. As a result you will have all dependencies requested by your pyproject.toml file, but they may not all be at the very latest available versions (some of the dependencies listed in the poetry.lock file may have released newer versions since the file was created). This is by design, it ensures that your project does not break because of unexpected changes in dependencies. Commit your poetry.lock file to version control \ud83d\udd17 Committing this file to VC is important because it will cause anyone who sets up the project to use the exact same versions of the dependencies that you are using. Your CI server, production machines, other developers in your team, everything and everyone runs on the same dependencies, which mitigates the potential for bugs affecting only some parts of the deployments. Even if you develop alone, in six months when reinstalling the project you can feel confident the dependencies installed are still working even if your dependencies released many new versions since then. (See note below about using the update command.) \u6ce8\u610f For libraries it is not necessary to commit the lock file. Updating dependencies to their latest versions \ud83d\udd17 As mentioned above, the poetry.lock file prevents you from automatically getting the latest versions of your dependencies. To update to the latest versions, use the update command. This will fetch the latest matching versions (according to your pyproject.toml file) and update the lock file with the new versions. (This is equivalent to deleting the poetry.lock file and running install again.) \u6ce8\u610f Poetry will display a Warning when executing an install command if poetry.lock and pyproject.toml are not synchronized. Poetry and virtualenvs \ud83d\udd17 When you execute the install command (or any other \"install\" commands like add or remove ), Poetry will check if it's currently inside a virtualenv and, if not, will use an existing one or create a brand new one for you to always work isolated from your global Python installation. \u6ce8\u610f To create the virtualenv for the current project, Poetry will use the currently activated Python version. To easily switch between Python versions, it is recommended to use pyenv or similar tools. For instance, if your project is Python 2.7 only, a standard workflow would be: pyenv install 2 .7.15 pyenv local 2 .7.15 # Activate Python 2.7 for the current project poetry install","title":"Basic Usage"},{"location":"basic-usage/#_1","text":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306e\u5165\u9580\u3068\u3057\u3066\u3001 pendulum \u3068\u3044\u3046\u65e5\u4ed8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Poetry\u3092\u307e\u3060\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001 Introduction \u306e\u7ae0\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9"},{"location":"basic-usage/#_2","text":"\u6700\u521d\u306b\u3001\u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001 poetry-demo \u3068\u540d\u4ed8\u3051\u307e\u3057\u3087\u3046: poetry new poetry-demo \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u6b21\u306e\u5185\u5bb9\u3092\u6301\u3064 poetry-demo \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059: poetry-demo \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 poetry_demo \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_poetry_demo.py pyproject.toml \u30d5\u30a1\u30a4\u30eb\u304c\u3053\u3053\u3067\u306f\u6700\u3082\u91cd\u8981\u306a\u3082\u306e\u3067\u3059\u3002 \u3053\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u7d71\u62ec\u3057\u307e\u3059\u3002 \u4eca\u306e\u3068\u3053\u308d\u306e\u4e2d\u8eab\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059: [tool.poetry] name = \"poetry-demo\" version = \"0.1.0\" description = \"\" authors = [\"S\u00e9bastien Eustace <sebastien@eustace.io>\"] [tool.poetry.dependencies] python = \"*\" [tool.poetry.dev-dependencies] pytest = \"^3.4\"","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7"},{"location":"basic-usage/#_3","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306f\u3001 tool.poetry.dependencies \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 [tool.poetry.dependencies] pendulum = \"^1.4\" \u898b\u3066\u5206\u304b\u308b\u3088\u3046\u306b\u3001\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u306f \u30d1\u30c3\u30b1\u30fc\u30b8\u540d \u3068 \u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04 \u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u66f8\u304d\u307e\u3059\u3002 Poetry\u306f\u3053\u306e\u60c5\u5831\u3092\u4f7f\u3044\u3001 tool.poetry.repositories \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u767b\u9332\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8 \"\u30ec\u30dd\u30b8\u30c8\u30ea\" \u3082\u3057\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e PyPI \u304b\u3089\u3001\u6b63\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 pyproject.toml \u30d5\u30a1\u30a4\u30eb\u3092\u624b\u3067\u7de8\u96c6\u3059\u308b\u5909\u308f\u308a\u306b\u3001 add \u30b3\u30de\u30f3\u30c9\u3082\u4f7f\u3048\u307e\u3059\u3002 $ poetry add pendulum \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u81ea\u52d5\u7684\u306b\u9069\u5207\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u3092\u898b\u4ed8\u3051\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u305d\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 \u3002","title":"\u4f9d\u5b58\u95a2\u4fc2\u306e\u6307\u5b9a"},{"location":"basic-usage/#_4","text":"\u4eca\u306e\u4f8b\u3067\u306f\u3001 ^1.4 \u3068\u3044\u3046\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u306e\u4ed8\u3044\u305f pendulum \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8981\u6c42\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u5236\u7d04\u306f\u30011.4.0\u4ee5\u4e0a\u304b\u30642.0.0\u672a\u6e80\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3044\u3046\u610f\u5473\u3067\u3059 ( >=1.4.0 <2.0.0 )\u3002 \u30d0\u30fc\u30b8\u30e7\u30f3\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u3069\u3046\u3057\u306e\u95a2\u4fc2\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u306b\u3064\u3044\u3066\u3001\u3088\u308a\u6df1\u3044\u3053\u3068\u306b\u3064\u3044\u3066\u306f versions \u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002 \u6ce8\u610f Poetry\u306f\u3069\u3046\u3084\u3063\u3066\u6b63\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304b? `pyproject.toml` \u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068\u304d\u3001Poetry\u306f\u307e\u305a\u6700\u521d\u306b\u8981\u6c42\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3092\u53d6\u308a\u51fa\u3057\u3001 `repositories` \u30ad\u30fc\u306b\u767b\u9332\u3055\u308c\u305f\u30ec\u30dd\u30b8\u30c8\u30ea\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 \u8ffd\u52a0\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u3092\u767b\u9332\u3057\u3066\u3044\u306a\u3044\u304b\u3001\u6307\u5b9a\u3057\u305f\u30ec\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u8981\u6c42\u3055\u308c\u305f\u540d\u524d\u306e \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u898b\u4ed8\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001PyPI\u306b\u623b\u3063\u3066\u691c\u7d22\u3057\u307e\u3059\u3002 Poetry\u304c\u6b63\u3057\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8907\u6570\u898b\u4ed8\u3051\u305f\u3068\u304d\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04\u306b \u6700\u3082\u9069\u5408\u3059\u308b\u3082\u306e\u3092\u898b\u4ed8\u3051\u3088\u3046\u3068\u3057\u307e\u3059\u3002","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u5236\u7d04"},{"location":"basic-usage/#_5","text":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306b\u306f\u3001 install \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002 poetry install \u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u30012\u3064\u306e\u3046\u3061\u3069\u3061\u3089\u304b\u304c\u8d77\u3053\u308a\u307e\u3059:","title":"\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"basic-usage/#poetrylock","text":"\u4ee5\u524d\u306b\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3053\u3068\u304c\u7121\u304f\u3001 poetry.lock \u30d5\u30a1\u30a4\u30eb\u3082\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001Poetry\u306f pyproject.toml \u306b\u4e26\u3079\u3089\u308c\u305f\u5168\u3066\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u89e3\u6c7a\u3057\u3001\u305d\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3060\u3051\u3067\u3059\u3002 Poetry\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u5b8c\u4e86\u3059\u308b\u3068\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u305d\u306e\u6b63\u78ba\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u3092 poetry.lock \u3078\u66f8\u304d\u8fbc\u307f\u3001\u305d\u306e\u7279\u5b9a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u56fa\u5b9a\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30ec\u30dd\u30b8\u30c8\u30ea\u306b poetry.lock \u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3001\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u643a\u308f\u308b\u5168\u3066\u306e\u4eba\u306b\u3068\u3063\u3066\u3001\u540c\u3058\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u5f37\u5236\u3055\u308c\u308b\u3079\u304d\u3067\u3059 (\u4e0b\u3067\u3055\u3089\u306b\u89e3\u8aac\u3057\u307e\u3059)\u3002","title":"poetry.lock \u7121\u3057\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"basic-usage/#poetrylock_1","text":"This brings us to the second scenario. If there is already a poetry.lock file as well as a pyproject.toml file when you run poetry install , it means either you ran the install command before, or someone else on the project ran the install command and committed the poetry.lock file to the project (which is good). Either way, running install when a poetry.lock file is present resolves and installs all dependencies that you listed in pyproject.toml , but Poetry uses the exact versions listed in poetry.lock to ensure that the package versions are consistent for everyone working on your project. As a result you will have all dependencies requested by your pyproject.toml file, but they may not all be at the very latest available versions (some of the dependencies listed in the poetry.lock file may have released newer versions since the file was created). This is by design, it ensures that your project does not break because of unexpected changes in dependencies.","title":"poetry.lock \u6709\u308a\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"basic-usage/#commit-your-poetrylock-file-to-version-control","text":"Committing this file to VC is important because it will cause anyone who sets up the project to use the exact same versions of the dependencies that you are using. Your CI server, production machines, other developers in your team, everything and everyone runs on the same dependencies, which mitigates the potential for bugs affecting only some parts of the deployments. Even if you develop alone, in six months when reinstalling the project you can feel confident the dependencies installed are still working even if your dependencies released many new versions since then. (See note below about using the update command.) \u6ce8\u610f For libraries it is not necessary to commit the lock file.","title":"Commit your poetry.lock file to version control"},{"location":"basic-usage/#updating-dependencies-to-their-latest-versions","text":"As mentioned above, the poetry.lock file prevents you from automatically getting the latest versions of your dependencies. To update to the latest versions, use the update command. This will fetch the latest matching versions (according to your pyproject.toml file) and update the lock file with the new versions. (This is equivalent to deleting the poetry.lock file and running install again.) \u6ce8\u610f Poetry will display a Warning when executing an install command if poetry.lock and pyproject.toml are not synchronized.","title":"Updating dependencies to their latest versions"},{"location":"basic-usage/#poetry-and-virtualenvs","text":"When you execute the install command (or any other \"install\" commands like add or remove ), Poetry will check if it's currently inside a virtualenv and, if not, will use an existing one or create a brand new one for you to always work isolated from your global Python installation. \u6ce8\u610f To create the virtualenv for the current project, Poetry will use the currently activated Python version. To easily switch between Python versions, it is recommended to use pyenv or similar tools. For instance, if your project is Python 2.7 only, a standard workflow would be: pyenv install 2 .7.15 pyenv local 2 .7.15 # Activate Python 2.7 for the current project poetry install","title":"Poetry and virtualenvs"},{"location":"cli/","text":"\u30b3\u30de\u30f3\u30c9 \ud83d\udd17 You've already learned how to use the command-line interface to do some things. This chapter documents all the available commands. To get help from the command-line, simply call poetry or poetry list to see the complete list of commands, then --help combined with any of those can give you more information. As Poetry uses cleo you can call commands by short name if it's not ambiguous. poetry up calls poetry update . Global options \ud83d\udd17 --verbose (-v|vv|vvv) : Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. --help (-h) : Display help information. --quiet (-q) : Do not output any message. --ansi : Force ANSI output. --no-ansi : Disable ANSI output. --version (-V) : Display this application version. new \ud83d\udd17 This command will help you kickstart your new Python project by creating a directory structure suitable for most projects. poetry new my-package will create a folder as follows: my-package \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 my_package \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_my_package If you want to name your project differently than the folder, you can pass the --name option: poetry new my-folder --name my-package If you want to use a src folder, you can use the --src option: poetry new --src my-package That will create a folder structure as follows: my-package \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 my_package \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_my_package init \ud83d\udd17 This command will help you create a pyproject.toml file interactively by prompting you to provide basic information about your package. It will interactively ask you to fill in the fields, while using some smart defaults. poetry init Options \ud83d\udd17 --name : Name of the package. --description : Description of the package. --author : Author of the package. --dependency : Package to require with a version constraint. Should be in format foo:1.0.0 . --dev-dependency : Development requirements, see --require . install \ud83d\udd17 The install command reads the pyproject.toml file from the current project, resolves the dependencies, and installs them. poetry install If there is a poetry.lock file in the current directory, it will use the exact versions from there instead of resolving them. This ensures that everyone using the library will get the same versions of the dependencies. If there is no poetry.lock file, Poetry will create one after dependency resolution. You can specify to the command that you do not want the development dependencies installed by passing the --no-dev option. poetry install --no-dev You can also specify the extras you want installed by passing the --E|--extras option (See Extras for more info) poetry install --extras \"mysql pgsql\" poetry install -E mysql -E pgsql Options \ud83d\udd17 --no-dev : Do not install dev dependencies. --extras (-E) : Features to install (multiple values allowed). update \ud83d\udd17 In order to get the latest versions of the dependencies and to update the poetry.lock file, you should use the update command. poetry update This will resolve all dependencies of the project and write the exact versions into poetry.lock . If you just want to update a few packages and not all, you can list them as such: poetry update requests toml Options \ud83d\udd17 --dry-run : Outputs the operations but will not execute anything (implicitly enables --verbose). --no-dev : Do not install dev dependencies. --lock : Do not perform install (only update the lockfile). add \ud83d\udd17 The add command adds required packages to your pyproject.toml and installs them. If you do not specify a version constraint, poetry will choose a suitable one based on the available package versions. poetry add requests pendulum You can also add git dependencies: poetry add pendulum --git https://github.com/sdispater/pendulum.git or make them point to a local directory or file: poetry add my-package --path ../my-package/ poetry add my-package --path ../my-package/dist/my-package-0.1.0.tar.gz poetry add my-package --path ../my-package/dist/my_package-0.1.0.whl Path dependencies pointing to a local directory will be installed in editable mode (i.e. setuptools \"develop mode\"). It means that changes in the local directory will be reflected directly in environment. If you don't want the dependency to be installed in editable mode you can specify it in the pyproject.toml file: [tool.poetry.dependencies] my-package = {path = \"../my/path\", develop = false} Options \ud83d\udd17 --dev (-D) : Add package as development dependency. --git : The url of the Git repository. --path : The path to a dependency. --extras (-E) : Extras to activate for the dependency. --optional : Add as an optional dependency. --dry-run : Outputs the operations but will not execute anything (implicitly enables --verbose). remove \ud83d\udd17 The remove command removes a package from the current list of installed packages. poetry remove pendulum Options \ud83d\udd17 --dev (-D) : Removes a package from the development dependencies. --dry-run : Outputs the operations but will not execute anything (implicitly enables --verbose). show \ud83d\udd17 To list all of the available packages, you can use the show command. poetry show If you want to see the details of a certain package, you can pass the package name. poetry show pendulum name : pendulum version : 1 .4.2 description : Python datetimes made easy dependencies: - python-dateutil > = 2 .6.1 - tzlocal > = 1 .4 - pytzdata > = 2017 .2.2 Options \ud83d\udd17 --no-dev : Do not list the dev dependencies. --tree : List the dependencies as a tree. --latest (-l) : Show the latest version. --outdated (-o) : Show the latest version but only for packages that are outdated. build \ud83d\udd17 The build command builds the source and wheels archives. poetry build Note that, at the moment, only pure python wheels are supported. Options \ud83d\udd17 --format (-F) : Limit the format to either wheel or sdist. publish \ud83d\udd17 This command publishes the package, previously built with the build command, to the remote repository. It will automatically register the package before uploading if this is the first time it is submitted. poetry publish It can also build the package if you pass it the --build option. Options \ud83d\udd17 --repository (-r) : The repository to register the package to (default: pypi ). Should match a repository name set by the config command. --username (-u) : The username to access the repository. --password (-p) : The password to access the repository. config \ud83d\udd17 The config command allows you to edit poetry config settings and repositories. poetry config --list Usage \ud83d\udd17 poetry config [ options ] [ setting-key ] [ setting-value1 ] ... [ setting-valueN ] setting-key is a configuration option name and setting-value1 is a configuration value. See Configuration for all available settings. Options \ud83d\udd17 --unset : Remove the configuration element named by setting-key . --list : Show the list of current config variables. run \ud83d\udd17 The run command executes the given command inside the project's virtualenv. poetry run python -V It can also execute one of the scripts defined in pyproject.toml . So, if you have a script defined like this: [tool.poetry.scripts] my-script = \"my_module:main\" You can execute it like so: poetry run my-script Note that this command has no option. shell \ud83d\udd17 The shell command spawns a shell, according to the $SHELL environment variable, within the virtual environment. If one doesn't exist yet, it will be created. poetry shell check \ud83d\udd17 The check command validates the structure of the pyproject.toml file and returns a detailed report if there are any errors. poetry check search \ud83d\udd17 This command searches for packages on a remote index. poetry search requests pendulum Options \ud83d\udd17 --only-name (-N) : Search only in name. lock \ud83d\udd17 This command locks (without installing) the dependencies specified in pyproject.toml . poetry lock version \ud83d\udd17 This command bumps the version of the project and writes the new version back to pyproject.toml The new version should ideally be a valid semver string or a valid bump rule: patch , minor , major , prepatch , preminor , premajor , prerelease .","title":"Commands"},{"location":"cli/#_1","text":"You've already learned how to use the command-line interface to do some things. This chapter documents all the available commands. To get help from the command-line, simply call poetry or poetry list to see the complete list of commands, then --help combined with any of those can give you more information. As Poetry uses cleo you can call commands by short name if it's not ambiguous. poetry up calls poetry update .","title":"\u30b3\u30de\u30f3\u30c9"},{"location":"cli/#global-options","text":"--verbose (-v|vv|vvv) : Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug. --help (-h) : Display help information. --quiet (-q) : Do not output any message. --ansi : Force ANSI output. --no-ansi : Disable ANSI output. --version (-V) : Display this application version.","title":"Global options"},{"location":"cli/#new","text":"This command will help you kickstart your new Python project by creating a directory structure suitable for most projects. poetry new my-package will create a folder as follows: my-package \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 my_package \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_my_package If you want to name your project differently than the folder, you can pass the --name option: poetry new my-folder --name my-package If you want to use a src folder, you can use the --src option: poetry new --src my-package That will create a folder structure as follows: my-package \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 my_package \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_my_package","title":"new"},{"location":"cli/#init","text":"This command will help you create a pyproject.toml file interactively by prompting you to provide basic information about your package. It will interactively ask you to fill in the fields, while using some smart defaults. poetry init","title":"init"},{"location":"cli/#options","text":"--name : Name of the package. --description : Description of the package. --author : Author of the package. --dependency : Package to require with a version constraint. Should be in format foo:1.0.0 . --dev-dependency : Development requirements, see --require .","title":"Options"},{"location":"cli/#install","text":"The install command reads the pyproject.toml file from the current project, resolves the dependencies, and installs them. poetry install If there is a poetry.lock file in the current directory, it will use the exact versions from there instead of resolving them. This ensures that everyone using the library will get the same versions of the dependencies. If there is no poetry.lock file, Poetry will create one after dependency resolution. You can specify to the command that you do not want the development dependencies installed by passing the --no-dev option. poetry install --no-dev You can also specify the extras you want installed by passing the --E|--extras option (See Extras for more info) poetry install --extras \"mysql pgsql\" poetry install -E mysql -E pgsql","title":"install"},{"location":"cli/#options_1","text":"--no-dev : Do not install dev dependencies. --extras (-E) : Features to install (multiple values allowed).","title":"Options"},{"location":"cli/#update","text":"In order to get the latest versions of the dependencies and to update the poetry.lock file, you should use the update command. poetry update This will resolve all dependencies of the project and write the exact versions into poetry.lock . If you just want to update a few packages and not all, you can list them as such: poetry update requests toml","title":"update"},{"location":"cli/#options_2","text":"--dry-run : Outputs the operations but will not execute anything (implicitly enables --verbose). --no-dev : Do not install dev dependencies. --lock : Do not perform install (only update the lockfile).","title":"Options"},{"location":"cli/#add","text":"The add command adds required packages to your pyproject.toml and installs them. If you do not specify a version constraint, poetry will choose a suitable one based on the available package versions. poetry add requests pendulum You can also add git dependencies: poetry add pendulum --git https://github.com/sdispater/pendulum.git or make them point to a local directory or file: poetry add my-package --path ../my-package/ poetry add my-package --path ../my-package/dist/my-package-0.1.0.tar.gz poetry add my-package --path ../my-package/dist/my_package-0.1.0.whl Path dependencies pointing to a local directory will be installed in editable mode (i.e. setuptools \"develop mode\"). It means that changes in the local directory will be reflected directly in environment. If you don't want the dependency to be installed in editable mode you can specify it in the pyproject.toml file: [tool.poetry.dependencies] my-package = {path = \"../my/path\", develop = false}","title":"add"},{"location":"cli/#options_3","text":"--dev (-D) : Add package as development dependency. --git : The url of the Git repository. --path : The path to a dependency. --extras (-E) : Extras to activate for the dependency. --optional : Add as an optional dependency. --dry-run : Outputs the operations but will not execute anything (implicitly enables --verbose).","title":"Options"},{"location":"cli/#remove","text":"The remove command removes a package from the current list of installed packages. poetry remove pendulum","title":"remove"},{"location":"cli/#options_4","text":"--dev (-D) : Removes a package from the development dependencies. --dry-run : Outputs the operations but will not execute anything (implicitly enables --verbose).","title":"Options"},{"location":"cli/#show","text":"To list all of the available packages, you can use the show command. poetry show If you want to see the details of a certain package, you can pass the package name. poetry show pendulum name : pendulum version : 1 .4.2 description : Python datetimes made easy dependencies: - python-dateutil > = 2 .6.1 - tzlocal > = 1 .4 - pytzdata > = 2017 .2.2","title":"show"},{"location":"cli/#options_5","text":"--no-dev : Do not list the dev dependencies. --tree : List the dependencies as a tree. --latest (-l) : Show the latest version. --outdated (-o) : Show the latest version but only for packages that are outdated.","title":"Options"},{"location":"cli/#build","text":"The build command builds the source and wheels archives. poetry build Note that, at the moment, only pure python wheels are supported.","title":"build"},{"location":"cli/#options_6","text":"--format (-F) : Limit the format to either wheel or sdist.","title":"Options"},{"location":"cli/#publish","text":"This command publishes the package, previously built with the build command, to the remote repository. It will automatically register the package before uploading if this is the first time it is submitted. poetry publish It can also build the package if you pass it the --build option.","title":"publish"},{"location":"cli/#options_7","text":"--repository (-r) : The repository to register the package to (default: pypi ). Should match a repository name set by the config command. --username (-u) : The username to access the repository. --password (-p) : The password to access the repository.","title":"Options"},{"location":"cli/#config","text":"The config command allows you to edit poetry config settings and repositories. poetry config --list","title":"config"},{"location":"cli/#usage","text":"poetry config [ options ] [ setting-key ] [ setting-value1 ] ... [ setting-valueN ] setting-key is a configuration option name and setting-value1 is a configuration value. See Configuration for all available settings.","title":"Usage"},{"location":"cli/#options_8","text":"--unset : Remove the configuration element named by setting-key . --list : Show the list of current config variables.","title":"Options"},{"location":"cli/#run","text":"The run command executes the given command inside the project's virtualenv. poetry run python -V It can also execute one of the scripts defined in pyproject.toml . So, if you have a script defined like this: [tool.poetry.scripts] my-script = \"my_module:main\" You can execute it like so: poetry run my-script Note that this command has no option.","title":"run"},{"location":"cli/#shell","text":"The shell command spawns a shell, according to the $SHELL environment variable, within the virtual environment. If one doesn't exist yet, it will be created. poetry shell","title":"shell"},{"location":"cli/#check","text":"The check command validates the structure of the pyproject.toml file and returns a detailed report if there are any errors. poetry check","title":"check"},{"location":"cli/#search","text":"This command searches for packages on a remote index. poetry search requests pendulum","title":"search"},{"location":"cli/#options_9","text":"--only-name (-N) : Search only in name.","title":"Options"},{"location":"cli/#lock","text":"This command locks (without installing) the dependencies specified in pyproject.toml . poetry lock","title":"lock"},{"location":"cli/#version","text":"This command bumps the version of the project and writes the new version back to pyproject.toml The new version should ideally be a valid semver string or a valid bump rule: patch , minor , major , prepatch , preminor , premajor , prerelease .","title":"version"},{"location":"configuration/","text":"\u8a2d\u5b9a \ud83d\udd17 Poetry can be configured via the config command ( see more about its usage here ) or directly in the config.toml file that will be automatically be created when you first run that command. This file can typically be found in one of the following directories: macOS: ~/Library/Application Support/pypoetry Windows: C:\\Users\\<username>\\AppData\\Roaming\\pypoetry For Unix, we follow the XDG spec and support $XDG_CONFIG_HOME . That means, by default ~/.config/pypoetry . Available settings \ud83d\udd17 settings.virtualenvs.create : boolean \ud83d\udd17 Create a new virtualenv if one doesn't already exist. Defaults to true . settings.virtualenvs.in-project : boolean \ud83d\udd17 Create the virtualenv inside the project's root directory. Defaults to false . settings.virtualenvs.path : string \ud83d\udd17 Directory where virtualenvs will be created. Defaults to one of the following directories: macOS: ~/Library/Caches/pypoetry/virtualenvs Windows: C:\\Users\\<username>\\AppData\\Local\\pypoetry\\Cache/virtualenvs Unix: ~/.cache/pypoetry/virtualenvs repositories.<name> : string \ud83d\udd17 Set a new alternative repository. See Repositories for more information.","title":"Configuration"},{"location":"configuration/#_1","text":"Poetry can be configured via the config command ( see more about its usage here ) or directly in the config.toml file that will be automatically be created when you first run that command. This file can typically be found in one of the following directories: macOS: ~/Library/Application Support/pypoetry Windows: C:\\Users\\<username>\\AppData\\Roaming\\pypoetry For Unix, we follow the XDG spec and support $XDG_CONFIG_HOME . That means, by default ~/.config/pypoetry .","title":"\u8a2d\u5b9a"},{"location":"configuration/#available-settings","text":"","title":"Available settings"},{"location":"configuration/#settingsvirtualenvscreate-boolean","text":"Create a new virtualenv if one doesn't already exist. Defaults to true .","title":"settings.virtualenvs.create: boolean"},{"location":"configuration/#settingsvirtualenvsin-project-boolean","text":"Create the virtualenv inside the project's root directory. Defaults to false .","title":"settings.virtualenvs.in-project: boolean"},{"location":"configuration/#settingsvirtualenvspath-string","text":"Directory where virtualenvs will be created. Defaults to one of the following directories: macOS: ~/Library/Caches/pypoetry/virtualenvs Windows: C:\\Users\\<username>\\AppData\\Local\\pypoetry\\Cache/virtualenvs Unix: ~/.cache/pypoetry/virtualenvs","title":"settings.virtualenvs.path: string"},{"location":"configuration/#repositoriesltnamegt-string","text":"Set a new alternative repository. See Repositories for more information.","title":"repositories.&lt;name&gt;: string"},{"location":"contributing/","text":"Poetry\u3078\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8 \ud83d\udd17 First off, thank for taking the time to contribute! The following is a set of guidelines for contributing to Poetry on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Table of Contents \ud83d\udd17 How to contribute Reporting bugs Suggesting enhancements Contributing to code How to contribute \ud83d\udd17 Reporting bugs \ud83d\udd17 This section guides you through submitting a bug report for Poetry. Following these guidelines helps maintainers and the community understand your report, reproduce the behavior, and find related reports. Before creating bug reports, please check this list to be sure that you need to create one. When you are creating a bug report, please include as many details as possible. Fill out the required template , the information it asks helps the maintainers resolve the issue faster. Note If you find a Closed issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one. Before submitting a bug report \ud83d\udd17 Check the FAQs on the official website for a list of common questions and problems. Check that your issue does not already exist in the issue tracker . How do I submit a bug report \ud83d\udd17 Bugs are tracked on the official issue tracker where you can create a new one and provide the following information by filling in the template . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. Provide your pyproject.toml file in a Gist after removing potential private information (like private package repositories). Provide specific examples to demonstrate the steps to reproduce the issue . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. If the problem is an unexpected error being raised , execute the corresponding command in debug mode (the -vvv option). Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version of Poetry) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of Poetry? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of Poetry are you using? You can get the exact version by running poetry -V in your terminal. Which Python version Poetry has been installed for? Execute the debug:info to get the information. What's the name and version of the OS you're using ? Suggesting enhancements \ud83d\udd17 This section guides you through submitting an enhancement suggestion for Poetry, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion and find related suggestions. Before creating enhancement suggestions, please check this list as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible . Fill in the template , including the steps that you imagine you would take if the feature you're requesting existed. Before submitting an enhancement suggestion \ud83d\udd17 Check the FAQs on the official website for a list of common questions and problems. Check that your issue does not already exist in the issue tracker . How do I submit an Enhancement suggestion? \ud83d\udd17 Enhancement suggestions are tracked on the official issue tracker where you can create a new one and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps .. Describe the current behavior and explain which behavior you expected to see instead and why. Contributing to code \ud83d\udd17 Local development \ud83d\udd17 You will need Poetry to start contributing on the Poetry codebase. Refer to the documentation to start using Poetry. You will first need to clone the repository using git and place yourself in its directory: $ git clone git@github.com:sdispater/poetry.git $ cd poetry Now, you will need to install the required dependency for Poetry and be sure that the current tests are passing on your machine: $ poetry install $ poetry run pytest tests/ Poetry uses the black coding style and you must ensure that your code follows it. If not, the CI will fail and your Pull Request will not be merged. To make sure that you don't accidently commit code that does not follow the coding style, you can install a pre-commit hook that will check that everything is in order: $ poetry run pre-commit install Your code must always be accompanied by corresponding tests, if tests are not present your code will not be merged. Pull requests \ud83d\udd17 Fill in the required template Be sure that you pull request contains tests that cover the changed or added code. If you changes warrant a documentation change, the pull request must also update the documentation.","title":"Contributing"},{"location":"contributing/#poetry","text":"First off, thank for taking the time to contribute! The following is a set of guidelines for contributing to Poetry on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.","title":"Poetry\u3078\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8"},{"location":"contributing/#table-of-contents","text":"How to contribute Reporting bugs Suggesting enhancements Contributing to code","title":"Table of Contents"},{"location":"contributing/#how-to-contribute","text":"","title":"How to contribute"},{"location":"contributing/#reporting-bugs","text":"This section guides you through submitting a bug report for Poetry. Following these guidelines helps maintainers and the community understand your report, reproduce the behavior, and find related reports. Before creating bug reports, please check this list to be sure that you need to create one. When you are creating a bug report, please include as many details as possible. Fill out the required template , the information it asks helps the maintainers resolve the issue faster. Note If you find a Closed issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one.","title":"Reporting bugs"},{"location":"contributing/#before-submitting-a-bug-report","text":"Check the FAQs on the official website for a list of common questions and problems. Check that your issue does not already exist in the issue tracker .","title":"Before submitting a bug report"},{"location":"contributing/#how-do-i-submit-a-bug-report","text":"Bugs are tracked on the official issue tracker where you can create a new one and provide the following information by filling in the template . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. Provide your pyproject.toml file in a Gist after removing potential private information (like private package repositories). Provide specific examples to demonstrate the steps to reproduce the issue . Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. If the problem is an unexpected error being raised , execute the corresponding command in debug mode (the -vvv option). Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version of Poetry) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of Poetry? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Include details about your configuration and environment: Which version of Poetry are you using? You can get the exact version by running poetry -V in your terminal. Which Python version Poetry has been installed for? Execute the debug:info to get the information. What's the name and version of the OS you're using ?","title":"How do I submit a bug report"},{"location":"contributing/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion for Poetry, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion and find related suggestions. Before creating enhancement suggestions, please check this list as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible . Fill in the template , including the steps that you imagine you would take if the feature you're requesting existed.","title":"Suggesting enhancements"},{"location":"contributing/#before-submitting-an-enhancement-suggestion","text":"Check the FAQs on the official website for a list of common questions and problems. Check that your issue does not already exist in the issue tracker .","title":"Before submitting an enhancement suggestion"},{"location":"contributing/#how-do-i-submit-an-enhancement-suggestion","text":"Enhancement suggestions are tracked on the official issue tracker where you can create a new one and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps .. Describe the current behavior and explain which behavior you expected to see instead and why.","title":"How do I submit an Enhancement suggestion?"},{"location":"contributing/#contributing-to-code","text":"","title":"Contributing to code"},{"location":"contributing/#local-development","text":"You will need Poetry to start contributing on the Poetry codebase. Refer to the documentation to start using Poetry. You will first need to clone the repository using git and place yourself in its directory: $ git clone git@github.com:sdispater/poetry.git $ cd poetry Now, you will need to install the required dependency for Poetry and be sure that the current tests are passing on your machine: $ poetry install $ poetry run pytest tests/ Poetry uses the black coding style and you must ensure that your code follows it. If not, the CI will fail and your Pull Request will not be merged. To make sure that you don't accidently commit code that does not follow the coding style, you can install a pre-commit hook that will check that everything is in order: $ poetry run pre-commit install Your code must always be accompanied by corresponding tests, if tests are not present your code will not be merged.","title":"Local development"},{"location":"contributing/#pull-requests","text":"Fill in the required template Be sure that you pull request contains tests that cover the changed or added code. If you changes warrant a documentation change, the pull request must also update the documentation.","title":"Pull requests"},{"location":"faq/","text":"FAQ \ud83d\udd17 Why is the dependency resolution process slow? \ud83d\udd17 While the dependency resolver at the heart of Poetry is highly optimized and should be fast enough for most cases, sometimes, with some specific set of dependencies, it can take time to find a valid solution. This is due to the fact that not all libraries on PyPI have properly declared their metadata and, as such, they are not available via the PyPI JSON API. At this point, Poetry has no choice but downloading the packages and inspect them to get the necessary information. This is an expensive operation, both in bandwidth and time, which is why it seems this is a long process. At the moment there is no way around it. Note Once Poetry has cached the releases' information, the dependency resolution process will be much faster. Why are unbound version constraints a bad idea? \ud83d\udd17 A version constraint without an upper bound such as * or >=3.4 will allow updates to any future version of the dependency. This includes major versions breaking backward compatibility. Once a release of your package is published, you cannot tweak its dependencies anymore in case a dependency breaks BC - you have to do a new release but the previous one stays broken. The only good alternative is to define an upper bound on your constraints, which you can increase in a new release after testing that your package is compatible with the new major version of your dependency. For example instead of using >=3.4 you should use ~3.4 which allows all versions <4.0 . The ^ operator works very well with libraries following semantic versioning . Is tox supported? \ud83d\udd17 Yes. By using the isolated builds tox provides, you can use it in combination with the PEP 517 compliant build system provided by Poetry. So, in your pyproject.toml file, add this section if it does not already exist: [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" And use a tox.ini configuration file similar to this: [tox] isolated_build = true envlist = py27, py36 [testenv] whitelist_externals = poetry commands = poetry install -v poetry run pytest tests/ I don't want Poetry to manage my virtualenvs. Can I disable it? \ud83d\udd17 While Poetry automatically creates virtualenvs to always work isolated from the global Python installation, there are valid reasons why it's not necessary and is an overhead, like when working with containers. In this case, you can disable this feature by setting the virtualenvs.create setting to false : poetry config settings.virtualenvs.create false","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#why-is-the-dependency-resolution-process-slow","text":"While the dependency resolver at the heart of Poetry is highly optimized and should be fast enough for most cases, sometimes, with some specific set of dependencies, it can take time to find a valid solution. This is due to the fact that not all libraries on PyPI have properly declared their metadata and, as such, they are not available via the PyPI JSON API. At this point, Poetry has no choice but downloading the packages and inspect them to get the necessary information. This is an expensive operation, both in bandwidth and time, which is why it seems this is a long process. At the moment there is no way around it. Note Once Poetry has cached the releases' information, the dependency resolution process will be much faster.","title":"Why is the dependency resolution process slow?"},{"location":"faq/#why-are-unbound-version-constraints-a-bad-idea","text":"A version constraint without an upper bound such as * or >=3.4 will allow updates to any future version of the dependency. This includes major versions breaking backward compatibility. Once a release of your package is published, you cannot tweak its dependencies anymore in case a dependency breaks BC - you have to do a new release but the previous one stays broken. The only good alternative is to define an upper bound on your constraints, which you can increase in a new release after testing that your package is compatible with the new major version of your dependency. For example instead of using >=3.4 you should use ~3.4 which allows all versions <4.0 . The ^ operator works very well with libraries following semantic versioning .","title":"Why are unbound version constraints a bad idea?"},{"location":"faq/#is-tox-supported","text":"Yes. By using the isolated builds tox provides, you can use it in combination with the PEP 517 compliant build system provided by Poetry. So, in your pyproject.toml file, add this section if it does not already exist: [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" And use a tox.ini configuration file similar to this: [tox] isolated_build = true envlist = py27, py36 [testenv] whitelist_externals = poetry commands = poetry install -v poetry run pytest tests/","title":"Is tox supported?"},{"location":"faq/#i-dont-want-poetry-to-manage-my-virtualenvs-can-i-disable-it","text":"While Poetry automatically creates virtualenvs to always work isolated from the global Python installation, there are valid reasons why it's not necessary and is an overhead, like when working with containers. In this case, you can disable this feature by setting the virtualenvs.create setting to false : poetry config settings.virtualenvs.create false","title":"I don't want Poetry to manage my virtualenvs. Can I disable it?"},{"location":"libraries/","text":"\u30e9\u30a4\u30d6\u30e9\u30ea \ud83d\udd17 This chapter will tell you how to make your library installable through Poetry. Every project is a package \ud83d\udd17 As soon as you have a pyproject.toml in a directory, that directory is a package. However, to make it accessible to others you will need to package and publish it. Versioning \ud83d\udd17 While Poetry does not enforce any convention regarding package versioning, it strongly recommends to follow semantic versioning . This has many advantages for the end users and allows them to set appropriate version constraints . Lock file \ud83d\udd17 For your library, you may commit the poetry.lock file if you want to. This can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project. If you do not want to commit the lock file and you are using git, add it to the .gitignore . Packaging \ud83d\udd17 Before you can actually publish your library, you will need to package it. poetry build This command will package your library in two different formats: sdist which is the source format, and wheel which is a compiled package. Once that's done you are ready to publish your library Publishing to PyPI \ud83d\udd17 Alright, so now you can publish packages. Poetry will publish to PyPI by default. Anything that is published to PyPI is available automatically through Poetry. Since pendulum is on PyPI we can depend on it without having to specify any additional repositories. If we wanted to share poetry-demo with the Python community, we would publish on PyPI as well. Doing so is really easy. poetry publish This will package and publish the library to PyPI, at the condition that you are a registered user and you have configured your credentials properly. Note The publish command does not execute build by default. If you want to build and publish your packages together, just pass the --build option. Once this is done, your library will be available to anyone. Publishing to a private repository \ud83d\udd17 Sometimes, you may want to keep your library private but also being accessible to your team. In this case, you will need to use a private repository. In order to publish to a private repository, you will need to add it to your global list of repositories. See Adding a repository for more information. Once this is done, you can actually publish to it like so: poetry publish -r my-repository","title":"Libraries"},{"location":"libraries/#_1","text":"This chapter will tell you how to make your library installable through Poetry.","title":"\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"libraries/#every-project-is-a-package","text":"As soon as you have a pyproject.toml in a directory, that directory is a package. However, to make it accessible to others you will need to package and publish it.","title":"Every project is a package"},{"location":"libraries/#versioning","text":"While Poetry does not enforce any convention regarding package versioning, it strongly recommends to follow semantic versioning . This has many advantages for the end users and allows them to set appropriate version constraints .","title":"Versioning"},{"location":"libraries/#lock-file","text":"For your library, you may commit the poetry.lock file if you want to. This can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project. If you do not want to commit the lock file and you are using git, add it to the .gitignore .","title":"Lock file"},{"location":"libraries/#packaging","text":"Before you can actually publish your library, you will need to package it. poetry build This command will package your library in two different formats: sdist which is the source format, and wheel which is a compiled package. Once that's done you are ready to publish your library","title":"Packaging"},{"location":"libraries/#publishing-to-pypi","text":"Alright, so now you can publish packages. Poetry will publish to PyPI by default. Anything that is published to PyPI is available automatically through Poetry. Since pendulum is on PyPI we can depend on it without having to specify any additional repositories. If we wanted to share poetry-demo with the Python community, we would publish on PyPI as well. Doing so is really easy. poetry publish This will package and publish the library to PyPI, at the condition that you are a registered user and you have configured your credentials properly. Note The publish command does not execute build by default. If you want to build and publish your packages together, just pass the --build option. Once this is done, your library will be available to anyone.","title":"Publishing to PyPI"},{"location":"libraries/#publishing-to-a-private-repository","text":"Sometimes, you may want to keep your library private but also being accessible to your team. In this case, you will need to use a private repository. In order to publish to a private repository, you will need to add it to your global list of repositories. See Adding a repository for more information. Once this is done, you can actually publish to it like so: poetry publish -r my-repository","title":"Publishing to a private repository"},{"location":"pyproject/","text":"pyproject.toml \u30d5\u30a1\u30a4\u30eb \ud83d\udd17 The tool.poetry section of the pyproject.toml file is composed of multiple sections. name \ud83d\udd17 The name of the package. Required version \ud83d\udd17 The version of the package. Required This should follow semantic versioning . However it will not be enforced and you remain free to follow another specification. description \ud83d\udd17 A short description of the package. Required license \ud83d\udd17 The license of the package. The recommended notation for the most common licenses is (alphabetical): Apache-2.0 BSD-2-Clause BSD-3-Clause BSD-4-Clause GPL-2.0 GPL-2.0+ GPL-3.0 GPL-3.0+ LGPL-2.1 LGPL-2.1+ LGPL-3.0 LGPL-3.0+ MIT Optional, but it is highly recommended to supply this. More identifiers are listed at the SPDX Open Source License Registry . authors \ud83d\udd17 The authors of the package. Required This is a list of authors and should contain at least one author. Authors must be in the form name <email> . readme \ud83d\udd17 The readme file of the package. Optional The file can be either README.rst or README.md . homepage \ud83d\udd17 An URL to the website of the project. Optional repository \ud83d\udd17 An URL to the repository of the project. Optional documentation \ud83d\udd17 An URL to the documentation of the project. Optional keywords \ud83d\udd17 A list of keywords (max: 5) that the package is related to. Optional classifiers \ud83d\udd17 A list of PyPI trove classifiers that describe the project. Optional [tool.poetry] # ... classifiers = [ \"Topic :: Software Development :: Build Tools\", \"Topic :: Software Development :: Libraries :: Python Modules\" ] Note Note that Python classifiers are still automatically added for you and are determined by your python requirement. The license property will also set the License classifier automatically. packages \ud83d\udd17 A list of packages and modules to include in the final distribution. If your project structure differs from the standard one supported by poetry , you can specify the packages you want to include in the final distribution. [tool.poetry] # ... packages = [ { include = \"mypackage\" }, { include = \"extra_package/**/*.py\" }, ] If your package is stored inside a \"source\" directory, you must specify it: [tool.poetry] # ... packages = [ { include = \"mypackage\", from = \"lib\" }, ] Note Using packages disables the package auto-detection feature meaning you have to explicitly specify the \"default\" package. For instance, if you have a package named my_package and you want to also include another package named extra_package , you will need to specify my_package explicitly: packages = [ { include = \"mypackage\" }, { include = \"extra_package\" }, ] Note Poetry is clever enough to detect Python subpackages. Thus, you only have to specify the directory where your root package resides. include and exclude \ud83d\udd17 A list of patterns that will be included in the final package. You can explicitly specify to Poetry that a set of globs should be ignored or included for the purposes of packaging. The globs specified in the exclude field identify a set of files that are not included when a package is built. If a VCS is being used for a package, the exclude field will be seeded with the VCS\u2019 ignore settings ( .gitignore for git for example). [tool.poetry] # ... include = [\"CHANGELOG.md\"] exclude = [\"my_package/excluded.py\"] dependencies and dev-dependencies \ud83d\udd17 Poetry is configured to look for dependencies on PyPi by default. Only the name and a version string are required in this case. [tool.poetry.dependencies] requests = \"^2.13.0\" If you want to use a private repository, you can add it to your pyproject.toml file, like so: [[tool.poetry.source]] name = 'private' url = 'http://example.com/simple' Note Be aware that declaring the python version for which your package is compatible is mandatory: [tool.poetry.dependencies] python = \"^3.6\" scripts \ud83d\udd17 This section describe the scripts or executable that will be installed when installing the package [tool.poetry.scripts] poetry = 'poetry:console.run' Here, we will have the poetry script installed which will execute console.run in the poetry package. extras \ud83d\udd17 Poetry supports extras to allow expression of: optional dependencies, which enhance a package, but are not required; and clusters of optional dependencies. [tool.poetry] name = \"awesome\" [tool.poetry.dependencies] # These packages are mandatory and form the core of this package\u2019s distribution. mandatory = \"^1.0\" # A list of all of the optional dependencies, some of which are included in the # below `extras`. They can be opted into by apps. psycopg2 = { version = \"^2.7\", optional = true } mysqlclient = { version = \"^1.3\", optional = true } [tool.poetry.extras] mysql = [\"mysqlclient\"] pgsql = [\"psycopg2\"] When installing packages, you can specify extras by using the -E|--extras option: poetry install --extras \"mysql pgsql\" poetry install -E mysql -E pgsql plugins \ud83d\udd17 Poetry supports arbitrary plugins which work similarly to setuptools entry points . To match the example in the setuptools documentation, you would use the following: [tool.poetry.plugins] # Optional super table [tool.poetry.plugins.\"blogtool.parsers\"] \".rst\" = \"some_module:SomeClass\" Poetry and PEP-517 \ud83d\udd17 PEP-517 introduces a standard way to define alternative build systems to build a Python project. Poetry is compliant with PEP-517 so if you use Poetry to manage your Python project you should reference it in the build-system section of the pyproject.toml file like so: [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" Note When using the new or init command this section will be automatically added.","title":"The pyproject.toml file"},{"location":"pyproject/#pyprojecttoml","text":"The tool.poetry section of the pyproject.toml file is composed of multiple sections.","title":"pyproject.toml \u30d5\u30a1\u30a4\u30eb"},{"location":"pyproject/#name","text":"The name of the package. Required","title":"name"},{"location":"pyproject/#version","text":"The version of the package. Required This should follow semantic versioning . However it will not be enforced and you remain free to follow another specification.","title":"version"},{"location":"pyproject/#description","text":"A short description of the package. Required","title":"description"},{"location":"pyproject/#license","text":"The license of the package. The recommended notation for the most common licenses is (alphabetical): Apache-2.0 BSD-2-Clause BSD-3-Clause BSD-4-Clause GPL-2.0 GPL-2.0+ GPL-3.0 GPL-3.0+ LGPL-2.1 LGPL-2.1+ LGPL-3.0 LGPL-3.0+ MIT Optional, but it is highly recommended to supply this. More identifiers are listed at the SPDX Open Source License Registry .","title":"license"},{"location":"pyproject/#authors","text":"The authors of the package. Required This is a list of authors and should contain at least one author. Authors must be in the form name <email> .","title":"authors"},{"location":"pyproject/#readme","text":"The readme file of the package. Optional The file can be either README.rst or README.md .","title":"readme"},{"location":"pyproject/#homepage","text":"An URL to the website of the project. Optional","title":"homepage"},{"location":"pyproject/#repository","text":"An URL to the repository of the project. Optional","title":"repository"},{"location":"pyproject/#documentation","text":"An URL to the documentation of the project. Optional","title":"documentation"},{"location":"pyproject/#keywords","text":"A list of keywords (max: 5) that the package is related to. Optional","title":"keywords"},{"location":"pyproject/#classifiers","text":"A list of PyPI trove classifiers that describe the project. Optional [tool.poetry] # ... classifiers = [ \"Topic :: Software Development :: Build Tools\", \"Topic :: Software Development :: Libraries :: Python Modules\" ] Note Note that Python classifiers are still automatically added for you and are determined by your python requirement. The license property will also set the License classifier automatically.","title":"classifiers"},{"location":"pyproject/#packages","text":"A list of packages and modules to include in the final distribution. If your project structure differs from the standard one supported by poetry , you can specify the packages you want to include in the final distribution. [tool.poetry] # ... packages = [ { include = \"mypackage\" }, { include = \"extra_package/**/*.py\" }, ] If your package is stored inside a \"source\" directory, you must specify it: [tool.poetry] # ... packages = [ { include = \"mypackage\", from = \"lib\" }, ] Note Using packages disables the package auto-detection feature meaning you have to explicitly specify the \"default\" package. For instance, if you have a package named my_package and you want to also include another package named extra_package , you will need to specify my_package explicitly: packages = [ { include = \"mypackage\" }, { include = \"extra_package\" }, ] Note Poetry is clever enough to detect Python subpackages. Thus, you only have to specify the directory where your root package resides.","title":"packages"},{"location":"pyproject/#include-and-exclude","text":"A list of patterns that will be included in the final package. You can explicitly specify to Poetry that a set of globs should be ignored or included for the purposes of packaging. The globs specified in the exclude field identify a set of files that are not included when a package is built. If a VCS is being used for a package, the exclude field will be seeded with the VCS\u2019 ignore settings ( .gitignore for git for example). [tool.poetry] # ... include = [\"CHANGELOG.md\"] exclude = [\"my_package/excluded.py\"]","title":"include and exclude"},{"location":"pyproject/#dependencies-and-dev-dependencies","text":"Poetry is configured to look for dependencies on PyPi by default. Only the name and a version string are required in this case. [tool.poetry.dependencies] requests = \"^2.13.0\" If you want to use a private repository, you can add it to your pyproject.toml file, like so: [[tool.poetry.source]] name = 'private' url = 'http://example.com/simple' Note Be aware that declaring the python version for which your package is compatible is mandatory: [tool.poetry.dependencies] python = \"^3.6\"","title":"dependencies and dev-dependencies"},{"location":"pyproject/#scripts","text":"This section describe the scripts or executable that will be installed when installing the package [tool.poetry.scripts] poetry = 'poetry:console.run' Here, we will have the poetry script installed which will execute console.run in the poetry package.","title":"scripts"},{"location":"pyproject/#extras","text":"Poetry supports extras to allow expression of: optional dependencies, which enhance a package, but are not required; and clusters of optional dependencies. [tool.poetry] name = \"awesome\" [tool.poetry.dependencies] # These packages are mandatory and form the core of this package\u2019s distribution. mandatory = \"^1.0\" # A list of all of the optional dependencies, some of which are included in the # below `extras`. They can be opted into by apps. psycopg2 = { version = \"^2.7\", optional = true } mysqlclient = { version = \"^1.3\", optional = true } [tool.poetry.extras] mysql = [\"mysqlclient\"] pgsql = [\"psycopg2\"] When installing packages, you can specify extras by using the -E|--extras option: poetry install --extras \"mysql pgsql\" poetry install -E mysql -E pgsql","title":"extras"},{"location":"pyproject/#plugins","text":"Poetry supports arbitrary plugins which work similarly to setuptools entry points . To match the example in the setuptools documentation, you would use the following: [tool.poetry.plugins] # Optional super table [tool.poetry.plugins.\"blogtool.parsers\"] \".rst\" = \"some_module:SomeClass\"","title":"plugins"},{"location":"pyproject/#poetry-and-pep-517","text":"PEP-517 introduces a standard way to define alternative build systems to build a Python project. Poetry is compliant with PEP-517 so if you use Poetry to manage your Python project you should reference it in the build-system section of the pyproject.toml file like so: [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" Note When using the new or init command this section will be automatically added.","title":"Poetry and PEP-517"},{"location":"repositories/","text":"\u30ec\u30dd\u30b8\u30c8\u30ea \ud83d\udd17 Using the PyPI repository \ud83d\udd17 By default, Poetry is configured to use the PyPI repository, for package installation and publishing. So, when you add dependencies to your project, Poetry will assume they are available on PyPI. This represents most cases and will likely be enough for most users. Using a private repository \ud83d\udd17 However, at times, you may need to keep your package private while still being able to share it with your teammates. In this case, you will need to use a private repository. Adding a repository \ud83d\udd17 Adding a new repository is easy with the config command. poetry config repositories.foo https://foo.bar/simple/ This will set the url for repository foo to https://foo.bar/simple/ . Configuring credentials \ud83d\udd17 If you want to store your credentials for a specific repository, you can do so easily: poetry config http-basic.foo username password If you do not specify the password you will be prompted to write it. Note To publish to PyPI, you can set your credentials for the repository named pypi : poetry config http-basic.pypi username password You can also specify the username and password when using the publish command with the --username and --password options. Install dependencies from a private repository \ud83d\udd17 Now that you can publish to your private repository, you need to be able to install dependencies from it. For that, you have to edit your pyproject.toml file, like so [[tool.poetry.source]] name = \"foo\" url = \"https://foo.bar/simple/\" From now on, Poetry will also look for packages in your private repository. If your private repository requires HTTP Basic Auth be sure to add the username and password to your http-basic config using the example above (be sure to use the same name that is in the tool.poetry.source section). Poetry will use these values to authenticate to your private repository when downloading or looking for packages.","title":"Repositories"},{"location":"repositories/#_1","text":"","title":"\u30ec\u30dd\u30b8\u30c8\u30ea"},{"location":"repositories/#using-the-pypi-repository","text":"By default, Poetry is configured to use the PyPI repository, for package installation and publishing. So, when you add dependencies to your project, Poetry will assume they are available on PyPI. This represents most cases and will likely be enough for most users.","title":"Using the PyPI repository"},{"location":"repositories/#using-a-private-repository","text":"However, at times, you may need to keep your package private while still being able to share it with your teammates. In this case, you will need to use a private repository.","title":"Using a private repository"},{"location":"repositories/#adding-a-repository","text":"Adding a new repository is easy with the config command. poetry config repositories.foo https://foo.bar/simple/ This will set the url for repository foo to https://foo.bar/simple/ .","title":"Adding a repository"},{"location":"repositories/#configuring-credentials","text":"If you want to store your credentials for a specific repository, you can do so easily: poetry config http-basic.foo username password If you do not specify the password you will be prompted to write it. Note To publish to PyPI, you can set your credentials for the repository named pypi : poetry config http-basic.pypi username password You can also specify the username and password when using the publish command with the --username and --password options.","title":"Configuring credentials"},{"location":"repositories/#install-dependencies-from-a-private-repository","text":"Now that you can publish to your private repository, you need to be able to install dependencies from it. For that, you have to edit your pyproject.toml file, like so [[tool.poetry.source]] name = \"foo\" url = \"https://foo.bar/simple/\" From now on, Poetry will also look for packages in your private repository. If your private repository requires HTTP Basic Auth be sure to add the username and password to your http-basic config using the example above (be sure to use the same name that is in the tool.poetry.source section). Poetry will use these values to authenticate to your private repository when downloading or looking for packages.","title":"Install dependencies from a private repository"},{"location":"versions/","text":"\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u5236\u7d04 \ud83d\udd17 Poetry recommends following semantic versioning but will not enforce it. Version constraints \ud83d\udd17 Caret requirements \ud83d\udd17 Caret requirements allow SemVer compatible updates to a specified version. An update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping. In this case, if we ran poetry update requests , poetry would update us to version 2.14.0 if it was available, but would not update us to 3.0.0 . If instead we had specified the version string as ^0.1.13 , poetry would update to 0.1.14 but not 0.2.0 . 0.0.x is not considered compatible with any other version. Here are some more examples of caret requirements and the versions that would be allowed with them: Requirement Versions allowed ^1.2.3 >=1.2.3 <2.0.0 ^1.2 >=1.2.0 <2.0.0 ^1 >=1.0.0 <2.0.0 ^0.2.3 >=0.2.3 <0.3.0 ^0.0.3 >=0.0.3 <0.0.4 ^0.0 >=0.0.0 <0.1.0 ^0 >=0.0.0 <1.0.0 Tilde requirements \ud83d\udd17 Tilde requirements specify a minimal version with some ability to update. If you specify a major, minor, and patch version or only a major and minor version, only patch-level changes are allowed. If you only specify a major version, then minor- and patch-level changes are allowed. ~1.2.3 is an example of a tilde requirement. Requirement Versions allowed ~1.2.3 >=1.2.3 <1.3.0 ~1.2 >=1.2.0 <1.3.0 ~1 >=1.0.0 <2.0.0 Wildcard requirements \ud83d\udd17 Wildcard requirements allow for any version where the wildcard is positioned. * , 1.* and 1.2.* are examples of wildcard requirements. Requirement Versions allowed * >=0.0.0 1.* >=1.0.0 <2.0.0 1.2.* >=1.2.0 <1.3.0 Inequality requirements \ud83d\udd17 Inequality requirements allow manually specifying a version range or an exact version to depend on. Here are some examples of inequality requirements: >= 1.2.0 > 1 < 2 != 1.2.3 Exact requirements \ud83d\udd17 You can specify the exact version of a package. This will tell Poetry to install this version and this version only. If other dependencies require a different version, the solver will ultimately fail and abort any install or update procedures. Multiple requirements \ud83d\udd17 Multiple version requirements can also be separated with a comma, e.g. >= 1.2, < 1.5 . git dependencies \ud83d\udd17 To depend on a library located in a git repository, the minimum information you need to specify is the location of the repository with the git key: [tool.poetry.dependencies] requests = { git = \"https://github.com/requests/requests.git\" } Since we haven\u2019t specified any other information, Poetry assumes that we intend to use the latest commit on the master branch to build our project. You can combine the git key with the rev , tag , or branch keys to specify something else. Here's an example of specifying that you want to use the latest commit on a branch named next : [tool.poetry.dependencies] requests = { git = \"https://github.com/kennethreitz/requests.git\", branch = \"next\" } path dependencies \ud83d\udd17 To depend on a library located in a local directory or file, you can use the path property: [tool.poetry.dependencies] # directory my-package = { path = \"../my-package/\" } # file my-package = { path = \"../my-package/dist/my-package-0.1.0.tar.gz\" } Note You can install path dependencies in editable/development mode. Just pass --develop my-package (repeatable as much as you want) to the install command. Python restricted dependencies \ud83d\udd17 You can also specify that a dependency should be installed only for specific Python versions: [tool.poetry.dependencies] pathlib2 = { version = \"^2.2\", python = \"~2.7\" } [tool.poetry.dependencies] pathlib2 = { version = \"^2.2\", python = [\"~2.7\", \"^3.2\"] } Multiple constraints dependencies \ud83d\udd17 Sometimes, one of your dependency may have different version ranges depending on the target Python versions. Let's say you have a dependency on the package foo which is only compatible with Python <3.0 up to version 1.9 and compatible with Python 3.4+ from version 2.0: you would declare it like so: [tool.poetry.dependencies] foo = [ {version = \"<=1.9\", python = \"^2.7\"}, {version = \"^2.0\", python = \"^3.4\"} ] Note The constraints must have different requirements (like python ) otherwise it will cause an error when resolving dependencies.","title":"Versions"},{"location":"versions/#_1","text":"Poetry recommends following semantic versioning but will not enforce it.","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u5236\u7d04"},{"location":"versions/#version-constraints","text":"","title":"Version constraints"},{"location":"versions/#caret-requirements","text":"Caret requirements allow SemVer compatible updates to a specified version. An update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping. In this case, if we ran poetry update requests , poetry would update us to version 2.14.0 if it was available, but would not update us to 3.0.0 . If instead we had specified the version string as ^0.1.13 , poetry would update to 0.1.14 but not 0.2.0 . 0.0.x is not considered compatible with any other version. Here are some more examples of caret requirements and the versions that would be allowed with them: Requirement Versions allowed ^1.2.3 >=1.2.3 <2.0.0 ^1.2 >=1.2.0 <2.0.0 ^1 >=1.0.0 <2.0.0 ^0.2.3 >=0.2.3 <0.3.0 ^0.0.3 >=0.0.3 <0.0.4 ^0.0 >=0.0.0 <0.1.0 ^0 >=0.0.0 <1.0.0","title":"Caret requirements"},{"location":"versions/#tilde-requirements","text":"Tilde requirements specify a minimal version with some ability to update. If you specify a major, minor, and patch version or only a major and minor version, only patch-level changes are allowed. If you only specify a major version, then minor- and patch-level changes are allowed. ~1.2.3 is an example of a tilde requirement. Requirement Versions allowed ~1.2.3 >=1.2.3 <1.3.0 ~1.2 >=1.2.0 <1.3.0 ~1 >=1.0.0 <2.0.0","title":"Tilde requirements"},{"location":"versions/#wildcard-requirements","text":"Wildcard requirements allow for any version where the wildcard is positioned. * , 1.* and 1.2.* are examples of wildcard requirements. Requirement Versions allowed * >=0.0.0 1.* >=1.0.0 <2.0.0 1.2.* >=1.2.0 <1.3.0","title":"Wildcard requirements"},{"location":"versions/#inequality-requirements","text":"Inequality requirements allow manually specifying a version range or an exact version to depend on. Here are some examples of inequality requirements: >= 1.2.0 > 1 < 2 != 1.2.3","title":"Inequality requirements"},{"location":"versions/#exact-requirements","text":"You can specify the exact version of a package. This will tell Poetry to install this version and this version only. If other dependencies require a different version, the solver will ultimately fail and abort any install or update procedures.","title":"Exact requirements"},{"location":"versions/#multiple-requirements","text":"Multiple version requirements can also be separated with a comma, e.g. >= 1.2, < 1.5 .","title":"Multiple requirements"},{"location":"versions/#git-dependencies","text":"To depend on a library located in a git repository, the minimum information you need to specify is the location of the repository with the git key: [tool.poetry.dependencies] requests = { git = \"https://github.com/requests/requests.git\" } Since we haven\u2019t specified any other information, Poetry assumes that we intend to use the latest commit on the master branch to build our project. You can combine the git key with the rev , tag , or branch keys to specify something else. Here's an example of specifying that you want to use the latest commit on a branch named next : [tool.poetry.dependencies] requests = { git = \"https://github.com/kennethreitz/requests.git\", branch = \"next\" }","title":"git dependencies"},{"location":"versions/#path-dependencies","text":"To depend on a library located in a local directory or file, you can use the path property: [tool.poetry.dependencies] # directory my-package = { path = \"../my-package/\" } # file my-package = { path = \"../my-package/dist/my-package-0.1.0.tar.gz\" } Note You can install path dependencies in editable/development mode. Just pass --develop my-package (repeatable as much as you want) to the install command.","title":"path dependencies"},{"location":"versions/#python-restricted-dependencies","text":"You can also specify that a dependency should be installed only for specific Python versions: [tool.poetry.dependencies] pathlib2 = { version = \"^2.2\", python = \"~2.7\" } [tool.poetry.dependencies] pathlib2 = { version = \"^2.2\", python = [\"~2.7\", \"^3.2\"] }","title":"Python restricted dependencies"},{"location":"versions/#multiple-constraints-dependencies","text":"Sometimes, one of your dependency may have different version ranges depending on the target Python versions. Let's say you have a dependency on the package foo which is only compatible with Python <3.0 up to version 1.9 and compatible with Python 3.4+ from version 2.0: you would declare it like so: [tool.poetry.dependencies] foo = [ {version = \"<=1.9\", python = \"^2.7\"}, {version = \"^2.0\", python = \"^3.4\"} ] Note The constraints must have different requirements (like python ) otherwise it will cause an error when resolving dependencies.","title":"Multiple constraints dependencies"}]}